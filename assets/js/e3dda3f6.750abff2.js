"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[937],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>p});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),d=u(n),p=o,m=d["".concat(l,".").concat(p)]||d[p]||c[p]||i;return n?a.createElement(m,r(r({ref:t},h),{},{components:n})):a.createElement(m,r({ref:t},h))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},34044:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(87462),o=(n(67294),n(3905));const i={sidebar_position:2},r="Is q Something I Want to Use",s={unversionedId:"IsQSomethingIWantToUse",id:"IsQSomethingIWantToUse",title:"Is q Something I Want to Use",description:"This is a quick introduction to why q was made and what it can be used for. For",source:"@site/docs/IsQSomethingIWantToUse.md",sourceDirName:".",slug:"/IsQSomethingIWantToUse",permalink:"/docs/IsQSomethingIWantToUse",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Getting Started",permalink:"/docs/intro"},next:{title:"Installation",permalink:"/docs/Installation"}},l={},u=[{value:"The problem",id:"the-problem",level:2},{value:"The Solution",id:"the-solution",level:2},{value:"Luau Typechecking",id:"luau-typechecking",level:3},{value:"Inline Typechecking",id:"inline-typechecking",level:3},{value:"Tuples",id:"tuples",level:3},{value:"Wrappers",id:"wrappers",level:3},{value:"Conclusion",id:"conclusion",level:2}],h={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"is-q-something-i-want-to-use"},"Is q Something I Want to Use"),(0,o.kt)("p",null,"This is a quick introduction to why q was made and what it can be used for. For\nmore information, please look at the ",(0,o.kt)("a",{parentName:"p",href:"/api/q"},"API Reference"),". There you will\nfind examples of how to use q, as well as explanations of what each function,\nproperty, and type can do, as well as warnings and other information."),(0,o.kt)("p",null,"The main thing I will be explaining here is problems, solutions, what q can do,\nand what q was not designed to do. I will also go over alternative routes you\nmay want to take if you disagree with how q works, because there are many ways\nto solve problems, and q is not the only way to do it. I won't force you to use\nq if it doesn't fit your needs. I'd rather you have something that works for you\nthan something that doesn't."),(0,o.kt)("h2",{id:"the-problem"},"The problem"),(0,o.kt)("p",null,"Say we have this code to add cash to a player's leaderboard status:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'function addCash(playerName, amount)\n    PlayerList[playerName].leaderboard.Cash.Value += amount\nend\n\naddCash("builderman", 10)\n')),(0,o.kt)("p",null,"I wrote this off the top of my head, and reading it makes me sick. This code is\nrepulsive. There's no error handling, and it's not flexible. If you wanted to\nadd more leaderboard stats, you would have to add more functions like this. This\nis not good practice and in the long run is not worth it. I didn't include that\nyou have to keep refreshing the players list, but you get the point. That is,\nhowever, an entirely different topic that has nothing to do with typechecking\nwhich you can read about on your own time. We're going to use this code as an\nexample regardless of how bad it is."),(0,o.kt)("p",null,"Back to the main problem: What if I fed a string to ",(0,o.kt)("inlineCode",{parentName:"p"},"addCash")," as the second\nargument without thinking about it? Even though the code might work, I could not\nverify whether or not it was sanitized, so if I had a stray character in there,\nmy code would error. The error could be small, but what if it was big? What if\nit ran in a loop for all players (I have no clue who would do that, but bear\nwith me)? There's lots of undefined behavior that can be hit if you make a\nmistake in your code, and you could miss it the first time."),(0,o.kt)("h2",{id:"the-solution"},"The Solution"),(0,o.kt)("p",null,"There is no wrong answer here per se, but I'll go over a couple of solutions\nthat I've seen and why they're not ideal, then I'll go over the solution that\nI've come up with."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Whichever method you like best, you can use. There is no right or wrong\nanswer here. These are all adequate solutions, and maybe q isn't fit for you if\nyou don't like how it solves this issue. It all boils down to how YOU like the\nproblem to be solved. I'm just going over the different methods that I've seen\nand why I don't like them."))),(0,o.kt)("h3",{id:"luau-typechecking"},"Luau Typechecking"),(0,o.kt)("p",null,"You might say that Luau has typechecking, and that's true. I have nothing\nagainst Luau typechecking, but it's not enough. Luau typechecking is only for\nstatic types, and it's not enough to catch all errors. For example, if I were to\nhave a function that takes a function as an argument, I could pass a string to\nit and it would not error. Luau typechecking would not catch this error, because\nit's not a static type. It's a dynamic type. You can't check for dynamic types\nwith Luau's typechecking."),(0,o.kt)("p",null,"The second reason I'm not a fan of Luau typechecking is that it makes the code\nlook slightly more complicated. I like my code to be as simple as possible, and\nI don't like having to write ",(0,o.kt)("inlineCode",{parentName:"p"},"local x: number = 5")," every time I want to make a\nvariable. I like to be able to just write ",(0,o.kt)("inlineCode",{parentName:"p"},"local x = 5")," then check later on if\nit's a number and be done with it. Your preference may vary, but that's just my\nopinion."),(0,o.kt)("p",null,"Regardless on whether or not I like Luau typechecking, here is an example of how\nyou can solve the problem using it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'function addCash(playerName: string, amount: number)\n    PlayerList[playerName].leaderboard.Cash.Value += amount\nend\n\naddCash("builderman", 10)\naddCash("builderman", "10") -- not allowed\n')),(0,o.kt)("p",null,"Luau typechecking, even though it has its flaws, is still a good solution to the\nproblem. It's fast, it's easy to use, and it's built into Roblox. It's a good\nsolution, but it's not the solution I like."),(0,o.kt)("p",null,"You may be using vanilla Lua, and you may not have Luau typechecking. If you're\nusing vanilla Lua, you can use q to solve the problem. I'll go over that later\non in the document, after I go over the next solution, which is using inline\ntypechecking to solve the problem."),(0,o.kt)("h3",{id:"inline-typechecking"},"Inline Typechecking"),(0,o.kt)("p",null,"So, another solution I could do is to use ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," to check if the argument is a\nstring or a number, but that's not very readable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'function addCash(playerName, amount)\n    assert(type(playerName) == "string", "bad argument #1 (expected string)")\n    assert(type(amount) == "number", "bad argument #2 (expected number)")\n    PlayerList[playerName].leaderboard.Cash.Value += amount\nend\n\naddCash("builderman", 10)\naddCash("builderman", "10") --\x3e Script:3: bad argument #2 (expected number)\n')),(0,o.kt)("p",null,'The issue with this code is that you need to write a lot of boilerplate code\nthat can be easily done with a library. You also have to hardcode the argument\nnumber, which is not the best practice because if you were to insert an argument\nin the middle, you would have to change the argument number of every argument\nafter it. This is tedious and not fun to do. Also, depending on how much\narguments you have, you could be calling "assert" and "type" a lot, which is not\nvery efficient.'),(0,o.kt)("p",null,"Here's the second drawback: With q, you can create your own custom types and\ntypenames, and you can use them to check if the argument is the right fit for\nthe function. This makes the code more readable, and most of all more flexible.\nUsing inline typechecking, you can't do that. You can't create your own types\nand typenames, so if I only wanted to take, let's say an integer, not a decimal\nnumber, I would have to write a lot of boilerplate code to check if the number\nis an integer, where with q, I can just create a custom type called \"integer\"\nand use that to check if the argument is an integer."),(0,o.kt)("h3",{id:"tuples"},"Tuples"),(0,o.kt)("p",null,"A tuple is an ordered list of elements. This is a great example of arguments\nthat are passed to a function. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"q.tuple")," function to create a\ntuple that you can then feed arguments for it to check."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'function addCash(playerName, amount)\n    q.assert(q.tuple(q.string, q.number))\n    PlayerList[playerName].leaderboard.Cash.Value += amount\nend\n\naddCash("builderman", 10)\naddCash("builderman", "10") --\x3e Script:7: invalid argument #2 (expected number, got string)\n')),(0,o.kt)("p",null,"This is quite cleaner, don't you think? You also get more information about the\nproblem in return such as the line number. Best part is you don't have to\nhardcode anything. Although this is easy, I think it could get easier to write."),(0,o.kt)("p",null,"There are still drawbacks to this method. You have to write\n",(0,o.kt)("inlineCode",{parentName:"p"},"q.assert(q.tuple(q.string, q.number))")," every time you want to check arguments.\nThis too, is tedious."),(0,o.kt)("p",null,"Also, since this is a runtime check, it's not as efficient as Luau typechecking.\nIt's not a big deal, but it's still something to consider. If you are planning\nto write code that runs ten million times a second, you might want to consider\nusing Luau typechecking instead."),(0,o.kt)("h3",{id:"wrappers"},"Wrappers"),(0,o.kt)("p",null,"You could write a wrapper function that does the typechecking for you. This is\nsimilar to the last example, but it's a lot cleaner (in my opinion), and that's\nwhat I chose to do."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local addCash = q.wrap(function(playerName, amount)\n    PlayerList[playerName].leaderboard.Cash.Value += amount\nend, q.string, q.number)\n\naddCash("builderman", 10)\naddCash("builderman", "10") --\x3e Script:6: invalid argument #2 (expected number, got string)\n')),(0,o.kt)("p",null,"In my eyes, this is the best solution for general code. It's easy to write and\neasy to read. The code is still a piece of garbage, but that's not the point.\nThe point is that you can verify the types of your arguments without running\ninto the drawbacks that I went over in the last few examples. This still has an\nefficiency drawback, but it has the best readability and flexibility out of all\nthe solutions I've gone over."),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"As you saw, q is a great library to use for runtime typechecking. It's easy to\nuse and easy to read, and it's efficient enough to use in most cases. I went\nover the fact that Luau typechecking may be enough for you, and that's fine. I\njust wanted to show you that there are other options out there that you can use\nif you don't like Luau typechecking or if you want to tackle a problem that Luau\ntypechecking can't solve."),(0,o.kt)("p",null,"If you think using q is the way to go for you, then you can continue reading the\nrest of the documentation to learn more about q and how to get started. If you\ndon't think q is for you, then that's fine too. You can use Luau typechecking or\nyou can use inline typechecking. It's all up to you."))}c.isMDXComponent=!0}}]);